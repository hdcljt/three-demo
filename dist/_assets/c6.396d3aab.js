let a=document.createElement("style");a.innerHTML="",document.head.appendChild(a);import{d as e,r as n,o,S as d,B as t,M as s,a as i,U as r,j as h,D as c,J as l,X as w,Y as g,Z as m,w as p,_ as C,$ as u,a0 as v,a1 as S,P as f,W as x,b as L,h as b}from"./index.70147efe.js";import{u as M,m as j,b as P,C as F,D as y,M as D,c as A,a as H}from"./index.426d9030.js";import{O as W}from"./OrbitControls.47c25543.js";const E=(a,e,n,o)=>{const d=a.addFolder(n);d.add(e,"x",-10,10,.1).onChange(o),d.add(e,"y",-10,10,.1).onChange(o),d.add(e,"z",-10,10,.1).onChange(o),d.open()};var z=e({setup(){const a=n(null),e=M.create();return o(()=>{const n=new d;j().then(a=>{a.receiveShadow=!0,n.add(a),P(M)});{const a=4,o=new t(a,a,a),d=new s({color:"#8AC"}),r=new i(o,d);r.position.set(a+1,a/2,0),r.castShadow=!0,r.receiveShadow=!0,n.add(r),e.addColor(new F(d,"color"),"value").name("box.color").onChange(()=>P(M))}{const a=30,e=new t(a,a,a),o=new s({color:"#CCC",side:r}),d=new i(e,o);d.position.set(0,a/2-.1,0),d.receiveShadow=!0,n.add(d)}{const a=3,o=new h(a,32,16),d=new s({color:"#CA8"}),t=new i(o,d);t.position.set(-a-1,a+2,0),t.castShadow=!0,t.receiveShadow=!0,n.add(t),e.addColor(new F(d,"color"),"value").name("sphere.color").onChange(()=>P(M))}{const a=["none","AmbientLight","HemisphereLight","DirectionalLight","SpotLight","PointLight"];let o,d,t,s;e.add({light:"none"},"light",a).listen().onChange(a=>{if(o&&(n.remove(o),o=null),d&&(n.remove(d),d.dispose(),d=null),t&&(n.remove(t),t=null),s&&(e.removeFolder(s),s=null),"none"===a)return P(M);s=e.addFolder(a),s.open();if("DirectionalLight"===a){o=new c(16777215,1),o.castShadow=!0,o.position.set(0,10,0),o.target.position.set(-4,0,-4),n.add(o.target),t=new l(o.shadow.camera),n.add(t),d=new w(o),n.add(d);const a=()=>{o.target.updateMatrixWorld(),d.update(),o.shadow.camera.updateProjectionMatrix(),t.update()};a(),E(s,o.position,"position",()=>{a(),P(M)}),E(s,o.target.position,"target",()=>{a(),P(M)}),s.add(o,"castShadow").onChange(e=>{o.castShadow=e,a(),P(M)});const e=s.addFolder("Shadow Camera");e.open(),e.add(new y(o.shadow.camera,"left","right"),"value",1,100).name("width").onChange(()=>{a(),P(M)}),e.add(new y(o.shadow.camera,"bottom","top"),"value",1,100).name("height").onChange(()=>{a(),P(M)});const i=new D(o.shadow.camera,"near","far",.1);e.add(i,"min",.1,50,.1).name("near").onChange(()=>{a(),P(M)}),e.add(i,"max",.1,50,.1).name("far").onChange(()=>{a(),P(M)}),e.add(o.shadow.camera,"zoom",.01,2,.01).onChange(()=>{a(),P(M)})}else if("SpotLight"===a){const a=0,e=Math.PI/3;o=new g(16777215,1,a,e,0,1),o.castShadow=!0,o.position.set(0,10,0),o.target.position.set(-5,0,0),n.add(o.target),t=new l(o.shadow.camera),n.add(t),d=new m(o),n.add(d);const i=()=>{o.target.updateMatrixWorld(),d.update(),o.shadow.camera.updateProjectionMatrix(),t.update()};i(),E(s,o.position,"position",()=>{i(),P(M)}),E(s,o.target.position,"target",()=>{i(),P(M)}),s.add(o,"distance",0,40).onChange(()=>{i(),P(M)}),s.add(new A(o,"angle"),"value",0,90).name("angle").onChange(()=>{i(),P(M)}),s.add(o,"penumbra",0,1,.1).onChange(()=>{i(),P(M)}),s.add(o,"decay",0,4,.1).onChange(()=>{i(),P(M)}),s.add(o,"castShadow").onChange(a=>{i(),P(M)});const r=s.addFolder("Shadow Camera");r.open();const h=new D(o.shadow.camera,"near","far",.1);r.add(h,"min",.1,50,.1).name("near").onChange(()=>{i(),P(M)}),r.add(h,"max",.1,50,.1).name("far").onChange(()=>{i(),P(M)})}else if("PointLight"===a){o=new p(16777215,1,0,1),o.castShadow=!0,o.position.set(0,10,0),d=new C(o,1),n.add(d),E(s,o.position,"position",()=>{P(M)}),s.add(o,"distance",0,40).onChange(()=>{P(M)}),s.add(o,"decay",0,4,.1).onChange(()=>{P(M)}),s.add(o,"castShadow").onChange(a=>{o.castShadow=a,P(M)});const a=s.addFolder("Shadow Camera");a.open();const e=new D(o.shadow.camera,"near","far",.1);a.add(e,"min",.1,50,.1).name("near").onChange(()=>{P(M)}),a.add(e,"max",.1,50,.1).name("far").onChange(()=>{P(M)})}else if("HemisphereLight"===a){o=new u(16777215,16777215,1),d=new v(o,5),n.add(d);const a=()=>{d.update()};a(),E(s,o.position,"position",()=>{a(),P(M)}),s.addColor(new F(o,"groundColor"),"value").name("groundColor").onChange(()=>{a(),P(M)})}else"AmbientLight"===a&&(o=new S(16777215,1));n.add(o),s.addColor(new F(o,"color"),"value").name("color").onChange(()=>P(M)),s.add(o,"intensity",0,3).onChange(()=>P(M)),P(M)})}const o=new f(45,2,5,100);o.position.set(0,10,20);let L=new W(o,a.value);L.target.set(0,5,0),L.enableDamping=!0;const b=new x({canvas:a.value});b.shadowMap.enabled=!0;const M=()=>{if(H(b)){const a=b.domElement;o.aspect=a.clientWidth/a.clientHeight,o.updateProjectionMatrix()}L.update(),b.render(n,o)};P(M),L.addEventListener("change",()=>P(M))}),L(()=>{M.dispose()}),()=>b("canvas",{ref:a,class:"canvas"})}});export default z;
